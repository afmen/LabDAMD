"use strict";
/*
* Copyright 2024 gRPC authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPredicateForMatcher = getPredicateForMatcher;
const matcher_1 = require("./matcher");
const fraction_1 = require("./fraction");
function getPredicateForHeaderMatcher(headerMatch) {
    let valueChecker;
    switch (headerMatch.header_match_specifier) {
        case 'exact_match':
            valueChecker = new matcher_1.ExactValueMatcher(headerMatch.exact_match, false);
            break;
        case 'safe_regex_match':
            valueChecker = new matcher_1.SafeRegexValueMatcher(headerMatch.safe_regex_match.regex);
            break;
        case 'range_match':
            const start = BigInt(headerMatch.range_match.start);
            const end = BigInt(headerMatch.range_match.end);
            valueChecker = new matcher_1.RangeValueMatcher(start, end);
            break;
        case 'present_match':
            valueChecker = new matcher_1.PresentValueMatcher();
            break;
        case 'prefix_match':
            valueChecker = new matcher_1.PrefixValueMatcher(headerMatch.prefix_match, false);
            break;
        case 'suffix_match':
            valueChecker = new matcher_1.SuffixValueMatcher(headerMatch.suffix_match, false);
            break;
        case 'string_match':
            const stringMatch = headerMatch.string_match;
            switch (stringMatch.match_pattern) {
                case 'exact':
                    valueChecker = new matcher_1.ExactValueMatcher(stringMatch.exact, stringMatch.ignore_case);
                    break;
                case 'safe_regex':
                    valueChecker = new matcher_1.SafeRegexValueMatcher(stringMatch.safe_regex.regex);
                    break;
                case 'prefix':
                    valueChecker = new matcher_1.PrefixValueMatcher(stringMatch.prefix, stringMatch.ignore_case);
                    break;
                case 'suffix':
                    valueChecker = new matcher_1.SuffixValueMatcher(stringMatch.suffix, stringMatch.ignore_case);
                    break;
                case 'contains':
                    valueChecker = new matcher_1.ContainsValueMatcher(stringMatch.contains, stringMatch.ignore_case);
                    break;
                default:
                    valueChecker = new matcher_1.RejectValueMatcher();
            }
            break;
        default:
            valueChecker = new matcher_1.RejectValueMatcher();
    }
    return new matcher_1.HeaderMatcher(headerMatch.name, valueChecker, headerMatch.invert_match);
}
function getPredicateForMatcher(routeMatch) {
    let pathMatcher;
    const caseInsensitive = routeMatch.case_sensitive?.value === false;
    switch (routeMatch.path_specifier) {
        case 'prefix':
            pathMatcher = new matcher_1.PathPrefixValueMatcher(routeMatch.prefix, caseInsensitive);
            break;
        case 'path':
            pathMatcher = new matcher_1.PathExactValueMatcher(routeMatch.path, caseInsensitive);
            break;
        case 'safe_regex':
            pathMatcher = new matcher_1.PathSafeRegexValueMatcher(routeMatch.safe_regex.regex);
            break;
        default:
            pathMatcher = new matcher_1.RejectValueMatcher();
    }
    const headerMatchers = routeMatch.headers.map(getPredicateForHeaderMatcher);
    let runtimeFraction;
    if (!routeMatch.runtime_fraction?.default_value) {
        runtimeFraction = null;
    }
    else {
        runtimeFraction = (0, fraction_1.envoyFractionToFraction)(routeMatch.runtime_fraction.default_value);
    }
    return new matcher_1.FullMatcher(pathMatcher, headerMatchers, runtimeFraction);
}
//# sourceMappingURL=route.js.map