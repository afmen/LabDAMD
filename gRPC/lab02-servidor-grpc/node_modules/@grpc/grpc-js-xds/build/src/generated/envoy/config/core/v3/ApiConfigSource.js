"use strict";
// Original file: deps/envoy-api/envoy/config/core/v3/config_source.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports._envoy_config_core_v3_ApiConfigSource_ApiType = void 0;
// Original file: deps/envoy-api/envoy/config/core/v3/config_source.proto
/**
 * APIs may be fetched via either REST or gRPC.
 */
exports._envoy_config_core_v3_ApiConfigSource_ApiType = {
    /**
     * Ideally this would be 'reserved 0' but one can't reserve the default
     * value. Instead we throw an exception if this is ever used.
     * @deprecated
     */
    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE: 'DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE',
    /**
     * REST-JSON v2 API. The `canonical JSON encoding
     * <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
     * the v2 protos is used.
     */
    REST: 'REST',
    /**
     * SotW gRPC service.
     */
    GRPC: 'GRPC',
    /**
     * Using the delta xDS gRPC service, i.e. DeltaDiscovery{Request,Response}
     * rather than Discovery{Request,Response}. Rather than sending Envoy the entire state
     * with every update, the xDS server only sends what has changed since the last update.
     */
    DELTA_GRPC: 'DELTA_GRPC',
    /**
     * SotW xDS gRPC with ADS. All resources which resolve to this configuration source will be
     * multiplexed on a single connection to an ADS endpoint.
     * [#not-implemented-hide:]
     */
    AGGREGATED_GRPC: 'AGGREGATED_GRPC',
    /**
     * Delta xDS gRPC with ADS. All resources which resolve to this configuration source will be
     * multiplexed on a single connection to an ADS endpoint.
     * [#not-implemented-hide:]
     */
    AGGREGATED_DELTA_GRPC: 'AGGREGATED_DELTA_GRPC',
};
//# sourceMappingURL=ApiConfigSource.js.map