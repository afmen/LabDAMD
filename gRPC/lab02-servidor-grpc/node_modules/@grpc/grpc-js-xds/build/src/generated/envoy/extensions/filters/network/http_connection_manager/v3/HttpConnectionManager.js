"use strict";
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_PathWithEscapedSlashesAction = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails = exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType = void 0;
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_CodecType = {
    /**
     * For every new connection, the connection manager will determine which
     * codec to use. This mode supports both ALPN for TLS listeners as well as
     * protocol inference for plaintext listeners. If ALPN data is available, it
     * is preferred, otherwise protocol inference is used. In almost all cases,
     * this is the right option to choose for this setting.
     */
    AUTO: 'AUTO',
    /**
     * The connection manager will assume that the client is speaking HTTP/1.1.
     */
    HTTP1: 'HTTP1',
    /**
     * The connection manager will assume that the client is speaking HTTP/2
     * (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
     * Prior knowledge is allowed).
     */
    HTTP2: 'HTTP2',
    /**
     * [#not-implemented-hide:] QUIC implementation is not production ready yet. Use this enum with
     * caution to prevent accidental execution of QUIC code. I.e. `!= HTTP2` is no longer sufficient
     * to distinguish HTTP1 and HTTP2 traffic.
     */
    HTTP3: 'HTTP3',
};
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
/**
 * How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
 * header.
 */
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ForwardClientCertDetails = {
    /**
     * Do not send the XFCC header to the next hop. This is the default value.
     */
    SANITIZE: 'SANITIZE',
    /**
     * When the client connection is mTLS (Mutual TLS), forward the XFCC header
     * in the request.
     */
    FORWARD_ONLY: 'FORWARD_ONLY',
    /**
     * When the client connection is mTLS, append the client certificate
     * information to the requestâ€™s XFCC header and forward it.
     */
    APPEND_FORWARD: 'APPEND_FORWARD',
    /**
     * When the client connection is mTLS, reset the XFCC header with the client
     * certificate information and send it to the next hop.
     */
    SANITIZE_SET: 'SANITIZE_SET',
    /**
     * Always forward the XFCC header in the request, regardless of whether the
     * client connection is mTLS.
     */
    ALWAYS_FORWARD_ONLY: 'ALWAYS_FORWARD_ONLY',
};
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_Tracing_OperationName = {
    /**
     * The HTTP listener is used for ingress/incoming requests.
     */
    INGRESS: 'INGRESS',
    /**
     * The HTTP listener is used for egress/outgoing requests.
     */
    EGRESS: 'EGRESS',
};
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
/**
 * Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
 * This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
 */
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_PathWithEscapedSlashesAction = {
    /**
     * Default behavior specific to implementation (i.e. Envoy) of this configuration option.
     * Envoy, by default, takes the KEEP_UNCHANGED action.
     * NOTE: the implementation may change the default behavior at-will.
     */
    IMPLEMENTATION_SPECIFIC_DEFAULT: 'IMPLEMENTATION_SPECIFIC_DEFAULT',
    /**
     * Keep escaped slashes.
     */
    KEEP_UNCHANGED: 'KEEP_UNCHANGED',
    /**
     * Reject client request with the 400 status. gRPC requests will be rejected with the INTERNAL (13) error code.
     * The "httpN.downstream_rq_failed_path_normalization" counter is incremented for each rejected request.
     */
    REJECT_REQUEST: 'REJECT_REQUEST',
    /**
     * Unescape %2F and %5C sequences and redirect request to the new path if these sequences were present.
     * Redirect occurs after path normalization and merge slashes transformations if they were configured.
     * NOTE: gRPC requests will be rejected with the INTERNAL (13) error code.
     * This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
     * traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
     * The "httpN.downstream_rq_redirected_with_normalized_path" counter is incremented for each
     * redirected request.
     */
    UNESCAPE_AND_REDIRECT: 'UNESCAPE_AND_REDIRECT',
    /**
     * Unescape %2F and %5C sequences.
     * Note: this option should not be enabled if intermediaries perform path based access control as
     * it may lead to path confusion vulnerabilities.
     */
    UNESCAPE_AND_FORWARD: 'UNESCAPE_AND_FORWARD',
};
// Original file: deps/envoy-api/envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
exports._envoy_extensions_filters_network_http_connection_manager_v3_HttpConnectionManager_ServerHeaderTransformation = {
    /**
     * Overwrite any Server header with the contents of server_name.
     */
    OVERWRITE: 'OVERWRITE',
    /**
     * If no Server header is present, append Server server_name
     * If a Server header is present, pass it through.
     */
    APPEND_IF_ABSENT: 'APPEND_IF_ABSENT',
    /**
     * Pass through the value of the server header, and do not append a header
     * if none is present.
     */
    PASS_THROUGH: 'PASS_THROUGH',
};
//# sourceMappingURL=HttpConnectionManager.js.map